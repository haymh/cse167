#include <iostream>
#include <math.h>
#include "TrunIco.h"

#define P 1.6180339889

TrunIco::TrunIco(){
	v = new Vector4d[60]{
		Vector4d(-P, 2, -(1 + 2 * P)),
			Vector4d(-1, -3 * P, 0),
			Vector4d((2 + P), -2 * P, 1),
			Vector4d(0, 1, 3 * P),
			Vector4d(-1, -(2 + P), 2 * P),
			Vector4d(-3 * P, 0, 1),
			Vector4d(1, -(2 + P), 2 * P),
			Vector4d(-2 * P, 1, -(2 + P)),
			Vector4d(1, (2 + P), -2 * P),
			Vector4d(2, (1 + 2 * P), -P),
			Vector4d(-(2 + P), -2 * P, 1),
			Vector4d(-(2 + P), 2 * P, -1),
			Vector4d(-1, -(2 + P), -2 * P),
			Vector4d(-P, -2, -(1 + 2 * P)),
			Vector4d(-(1 + 2 * P), -P, 2),
			Vector4d((1 + 2 * P), P, 2),
			Vector4d(-1, 3 * P, 0),
			Vector4d((1 + 2 * P), P, -2),
			Vector4d(-2, (1 + 2 * P), P),
			Vector4d(-(1 + 2 * P), -P, -2),
			Vector4d(3 * P, 0, 1),
			Vector4d(P, -2, (1 + 2 * P)),
			Vector4d((1 + 2 * P), -P, -2),
			Vector4d(0, -1, -3 * P),
			Vector4d(0, -1, 3 * P),
			Vector4d(1, (2 + P), 2 * P),
			Vector4d(-(1 + 2 * P), P, -2),
			Vector4d(-2, (1 + 2 * P), -P),
			Vector4d(1, -3 * P, 0),
			Vector4d((1 + 2 * P), -P, 2),
			Vector4d(-2 * P, -1, -(2 + P)),
			Vector4d(2 * P, 1, (2 + P)),
			Vector4d(P, 2, (1 + 2 * P)),
			Vector4d((2 + P), 2 * P, -1),
			Vector4d(-(2 + P), -2 * P, -1),
			Vector4d(P, -2, -(1 + 2 * P)),
			Vector4d(2, -(1 + 2 * P), P),
			Vector4d(3 * P, 0, -1),
			Vector4d(-2 * P, 1, (2 + P)),
			Vector4d(-(1 + 2 * P), P, 2),
			Vector4d(-P, -2, (1 + 2 * P)),
			Vector4d((2 + P), -2 * P, -1),
			Vector4d(-1, (2 + P), 2 * P),
			Vector4d(-P, 2, (1 + 2 * P)),
			Vector4d(1, 3 * P, 0),
			Vector4d(-2 * P, -1, (2 + P)),
			Vector4d(P, 2, -(1 + 2 * P)),
			Vector4d(1, -(2 + P), -2 * P),
			Vector4d(2 * P, 1, -(2 + P)),
			Vector4d(2 * P, -1, (2 + P)),
			Vector4d(-1, (2 + P), -2 * P),
			Vector4d(2, (1 + 2 * P), P),
			Vector4d((2 + P), 2 * P, 1),
			Vector4d(-2, -(1 + 2 * P), -P),
			Vector4d(0, 1, -3 * P),
			Vector4d(-3 * P, 0, -1),
			Vector4d(2 * P, -1, -(2 + P)),
			Vector4d(2, -(1 + 2 * P), -P),
			Vector4d(-2, -(1 + 2 * P), P),
			Vector4d(-(2 + P), 2 * P, 1)
	};
	pentagon = new GLuint*[12]{
			new GLuint[5]{ 13, 23, 35, 47, 12 },
			new GLuint[5]{ 18, 59, 11, 27, 16 },
			new GLuint[5]{ 19, 30, 7, 26, 55 },
			new GLuint[5]{ 21, 24, 40, 4, 6 },
			new GLuint[5]{ 43, 3, 32, 25, 42 },
			new GLuint[5]{ 44, 9, 33, 52, 51 },
			new GLuint[5]{ 46, 54, 0, 50, 8 },
			new GLuint[5]{ 48, 17, 37, 22, 56 },
			new GLuint[5]{ 49, 31, 15, 20, 29 },
			new GLuint[5]{ 5, 39, 38, 45, 14 },
			new GLuint[5]{ 53, 1, 58, 10, 34 },
			new GLuint[5]{ 57, 28, 36, 2, 41 }
	};

	hexagon = new GLuint*[20]{
		new GLuint[6]{ 10, 14, 45, 40, 4, 58 },
			new GLuint[6]{ 11, 26, 7, 0, 50, 27 },
			new GLuint[6]{ 18, 59, 39, 38, 43, 42 },
			new GLuint[6]{ 2, 36, 6, 21, 49, 29 },
			new GLuint[6]{ 20, 37, 22, 41, 2, 29 },
			new GLuint[6]{ 25, 51, 52, 15, 31, 32 },
			new GLuint[6]{ 26, 11, 59, 39, 5, 55 },
			new GLuint[6]{ 28, 1, 53, 12, 47, 57 },
			new GLuint[6]{ 28, 1, 58, 4, 6, 36 },
			new GLuint[6]{ 31, 32, 3, 24, 21, 49 },
			new GLuint[6]{ 34, 19, 30, 13, 12, 53 },
			new GLuint[6]{ 37, 17, 33, 52, 15, 20 },
			new GLuint[6]{ 41, 22, 56, 35, 47, 57 },
			new GLuint[6]{ 44, 9, 8, 50, 27, 16 },
			new GLuint[6]{ 45, 38, 43, 3, 24, 40 },
			new GLuint[6]{ 48, 46, 54, 23, 35, 56 },
			new GLuint[6]{ 5, 55, 19, 34, 10, 14 },
			new GLuint[6]{ 51, 25, 42, 18, 16, 44 },
			new GLuint[6]{ 7, 0, 54, 23, 13, 30 },
			new GLuint[6]{ 9, 8, 46, 48, 17, 33 }
	};
}
